# -*- mode: makefile-gmake; -*-
#######################################################################
# Copyright (c) 2017 Artem V. Andreev
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#  
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#  
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#######################################################################

ifeq ($(TOPDIR),)
$(error No path to the top directory, do not call this makefile directly)
endif
ifeq ($(PLATFORM_ARCH),)
$(error Target architecture not defined, please run 'setup.sh')
endif
ifeq ($(PLATFORM_OS),)
$(error Target OS not defined, please run 'setup.sh')
endif

VPATH = $(TOPDIR)
CC ?= gcc
SED = sed
RM = rm -f
BISON = bison -d -Wall
FLEX = flex
ETAGS = etags
NM = nm
AWK = gawk
PKG_CONFIG = pkg-config
PCRE_CONFIG = $(PKG_CONFIG) libpcre
DOXYGEN = doxygen

PCRE_CFLAGS := $(shell $(PCRE_CONFIG) --cflags)
PCRE_LIBS := $(shell $(PCRE_CONFIG) --libs)

PLATFORM_ARCH_SYMBOL := $(subst :,_,$(subst .,_,$(subst -,_,$(subst +,_,$(PLATFORM_ARCH)))))
PLATFORM_OS_SYMBOL := $(subst :,_,$(subst .,_,$(subst -,_,$(subst +,_,$(PLATFORM_OS)))))

CPPFLAGS = -I. -I$(TOPDIR) -DPLATFORM_ARCH=\"$(PLATFORM_ARCH)\" -DPLATFORM_OS=\"$(PLATFORM_OS)\" -DPLATFORM_VARIANT=\"$(PLATFORM_VARIANT)\"
CPPFLAGS += -DPLATFORM_ARCH_IS_$(PLATFORM_ARCH_SYMBOL)=1 -DPLATFORM_OS_IS_$(PLATFORM_OS_SYMBOL)=1
ifneq ($(PLATFORM_VARIANT),)
CPPFLAGS += -DPLATFORM_VARIANT_IS_$(PLATFORM_VARIANT)=1
endif

TEST_CPPFLAGS =

CFLAGS += $(PCRE_CFLAGS)

LDFLAGS = -Wl,-export-dynamic
LDLIBS = $(PCRE_LIBS) -lunistring -lgc -lm -ldl -lcom_err
MFLAGS = -MM -MT '$@ $(patsubst %.d,%.o,$@)'

-include $(TOPDIR)/setup/$(PLATFORM_OS).mk
-include $(TOPDIR)/setup/$(PLATFORM_ARCH).mk
-include $(TOPDIR)/setup/$(PLATFORM_OS)_$(PLATFORM_ARCH).mk
-include $(TOPDIR)/setup/$(PLATFORM_CC_FAMILY).mk
-include $(TOPDIR)/setup/$(PLATFORM_CC_FAMILY)$(PLATFORM_CC_VERSION).mk
ifneq ($(PLATFORM_VARIANT),)
-include $(TOPDIR)/setup/$(PLATFORM_VARIANT).mk
endif


.SECONDARY :

C_SOURCES = status.c dstring.c

GENERATED_SOURCES = tensile.tab.c lex.yy.c

SOURCES = $(C_SOURCES)
SOURCES += $(GENERATED_SOURCES)

TESTABLES = status dstring

APPLICATION = tensilec

$(APPLICATION) : $(SOURCES:.c=.o)
	$(CC) -o $@ $(CFLAGS) $(LDFLAGS) $^ $(LDLIBS)

tensile.tab.o lex.yy.o : CFLAGS += $(GENERATED_CFLAGS)

lex.yy.c : tensile.l
	$(FLEX) $<

lex.yy.o lex.yy.d : lex.yy.c tensile.tab.h

%.tab.c : %.y
	$(BISON) $<

%.tab.h : %.tab.c ;

tests/%.o : CPPFLAGS += $(TEST_CPPFLAGS) -DDO_TESTS=1
tests/%.d : CPPFLAGS += $(TEST_CPPFLAGS) -DDO_TESTS=1
tests/%_ts : CFLAGS += $(TEST_CFLAGS)

%_ts : %_ts.o
	$(CC) -o $@ $(CFLAGS) $(LDFLAGS) $^ $(LDLIBS)

tests/%_ts.o : %.c
	$(CC) -c -o $@ $(CFLAGS) $(CPPFLAGS) $<

ifneq ($(MAKECMDGOALS),clean)
Makefile Makefile.generic : $(GENERATED_SOURCES)

include $(C_SOURCES:.c=.d)
include $(patsubst %.c,tests/%_ts.d,$(C_SOURCES))
endif

.PHONY : check
check : $(addsuffix .c.gcov,$(TESTABLES))

ifneq ($(LINT),)
.PHONY : lint
lint: $(C_SOURCES)
	$(LINT) $^

endif

ifeq ($(FORCE_CHECK),1)
.PHONY : $(patsubst %,tests/%_ts,$(TESTABLES))
endif

ifneq ($(GCOV),)

%.c.gcov : tests/%_ts.gcda %.c
	@$(GCOV) -r -l -s $(TOPDIR) -o $(patsubst %.gcda,%.o,$(filter %.gcda,$^)) $(filter %.c,$^) 2>&1 | grep -E '^File|Lines'

%.gcda : %.out ;

else

%.c.gcov : tests/%_ts.out
	@echo "No coverage" >$@

endif

%_ts.out : %_ts ../../../%.exp
	@$(RM) $<.gcda
	@$(abspath $<) 2>&1 | diff -u $(filter %.exp,$^) - >$@

.PHONY : doc
doc :
	cd $(TOPDIR); $(DOXYGEN) Doxyfile


TAGS : $(C_SOURCES)
	$(ETAGS) $^


.PHONY : clean
clean :
	$(RM) *.o
	$(RM) *.d
	$(RM) *.gcov
	$(RM) tests/*
	$(RM) $(APPLICATION)
	$(RM) $(GENERATED_FILES)

%.o : %.c
	$(CC) -c -o $@ $(CPPFLAGS) $(CFLAGS) $<

%.d : %.c | $(GENERATED_SOURCES)
	@set -e; $(RM) $@; \
	$(CC) $(MFLAGS) $(CPPFLAGS) $< > $@

tests/%_ts.d : %.c
	@set -e; $(RM) $@; \
	$(CC) $(MFLAGS) $(CPPFLAGS) $< > $@

