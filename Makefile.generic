# -*- mode: makefile-gmake; -*-
ifeq ($(TOPDIR),)
$(error No path to the top directory, do not call this makefile directly)
endif
ifeq ($(PLATFORM_ARCH),)
$(error Target architecture not defined, please run 'setup.sh')
endif
ifeq ($(PLATFORM_OS),)
$(error Target OS not defined, please run 'setup.sh')
endif

VPATH = $(TOPDIR)
CC ?= gcc
SED = sed
RM = rm -f
BISON = bison -d
FLEX = flex
ETAGS = etags
NM = nm
AWK = gawk
ROBODOC = robodoc

PLATFORM_ARCH_SYMBOL := $(subst :,_,$(subst .,_,$(subst -,_,$(subst +,_,$(PLATFORM_ARCH)))))
PLATFORM_OS_SYMBOL := $(subst :,_,$(subst .,_,$(subst -,_,$(subst +,_,$(PLATFORM_OS)))))

CPPFLAGS = -I. -I$(TOPDIR) -DPLATFORM_ARCH=\"$(PLATFORM_ARCH)\" -DPLATFORM_OS=\"$(PLATFORM_OS)\" -DPLATFORM_VARIANT=\"$(PLATFORM_VARIANT)\"
CPPFLAGS += -DPLATFORM_ARCH_IS_$(PLATFORM_ARCH_SYMBOL)=1 -DPLATFORM_OS_IS_$(PLATFORM_OS_SYMBOL)=1
ifneq ($(PLATFORM_VARIANT),)
CPPFLAGS += -DPLATFORM_VARIANT_IS_$(PLATFORM_VARIANT)=1
endif

TEST_CPPFLAGS = -DTEST_REPEAT_ARBITRARY=2

LDFLAGS = -Wl,-export-dynamic
LDLIBS = -lm -lfl -lunistring -ltre
MFLAGS = -MM -MT $(<:.c=.o)

-include $(TOPDIR)/setup/$(PLATFORM_OS).mk
-include $(TOPDIR)/setup/$(PLATFORM_ARCH).mk
-include $(TOPDIR)/setup/$(PLATFORM_OS)_$(PLATFORM_ARCH).mk
-include $(TOPDIR)/setup/$(PLATFORM_CC_FAMILY).mk
-include $(TOPDIR)/setup/$(PLATFORM_CC_FAMILY)$(PLATFORM_CC_VERSION).mk
ifneq ($(PLATFORM_VARIANT),)
-include $(TOPDIR)/setup/$(PLATFORM_VARIANT).mk
endif


.SECONDARY :

C_SOURCES = bitops.c

GENERIC_C_SOURCES = allocator.c

IMPL_SOURCES = $(C_SOURCES:.c=_impl.c)
IMPL_SOURCES += tensile.tab.c lex.yy.c

GENERATED_FILES = $(IMPL_SOURCES) $(C_SOURCES:.c=_api.h)
GENERATED_FILES += $(GENERIC_C_SOURCES:.c=_impl.c) $(GENERIC_C_SOURCES:.c=_api.h)

TESTABLES = bitops allocator

APPLICATION = tensile

$(APPLICATION) : $(IMPL_SOURCES:.c=.o)
	$(CC) -o $@ $(CFLAGS) $(LDFLAGS) $^ $(LDLIBS)

tensile.tab.o lex.yy.o : CFLAGS += $(GENERATED_CFLAGS)

lex.yy.c : tensile.l
	$(FLEX) $<

lex.yy.o lex.yy.d : lex.yy.c tensile.tab.h

%.tab.c : %.y
	$(BISON) $<

%.tab.h : %.tab.c ;

%_api.h : %_impl.c ;

%_impl.c : %.c $(TOPDIR)/extract_code.awk
	$(AWK) -f $(filter %.awk,$^) $< $(patsubst %_impl.c,%_api.h,$@) $(patsubst %_impl.c,tests/%_ts.c,$@) >$@

tests/% : CPPFLAGS += $(TEST_CPPFLAGS)
tests/% : CFLAGS += $(TEST_CFLAGS)

% : %_ts.o
	$(CC) -o $@ $(CFLAGS) $(LDFLAGS) $^ $(LDLIBS)

tests/%_ts.c : %_impl.c ;

ifneq ($(MAKECMDGOALS),clean)
Makefile : $(GENERATED_FILES)

include $(C_SOURCES:.c=_impl.d)
include $(patsubst %,tests/%_ts.d,$(TESTABLES))
endif

.PHONY : check
check : $(addprefix tests/,$(TESTABLES))
	@set -e; \
	for t in $(filter tests/%,$^); do \
		$(CHECK_TOOL) ./$$t;		\
	done

.PHONY : doc
doc :
	cd $(TOPDIR); $(ROBODOC)

TAGS : $(C_SOURCES)
	$(ETAGS) $^


.PHONY : clean 
clean :
	$(RM) *.o
	$(RM) *.d
	$(RM) tests/*
	$(RM) $(APPLICATION)
	$(RM) $(GENERATED_FILES)

%.o : %.c
	$(CC) -c -o $@ $(CPPFLAGS) $(CFLAGS) $<

%.d : %.c
	@set -e; $(RM) $@; \
	$(CC) $(MFLAGS) $(CPPFLAGS) $< > $@.$$$$; \
	$(SED) 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	$(RM) $@.$$$$

